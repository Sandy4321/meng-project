<?xml version="1.0" encoding="utf-8"?>
<posts>
  <row Id="1" PostTypeId="1" CreationDate="2015-02-03T16:40:26.487" Score="22" ViewCount="307" Body="&lt;p&gt;I'd like to see line numbers, starting with &lt;code&gt;1&lt;/code&gt; at the top, on the left side of Vim. Ideally it would look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1 | foo = Foo.new&#xA;2 | bar = Bar.new&#xA;3 | baz = foo.baz(bar)&#xA;...&#xA;10| test = AwesomeSauce.test&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;How can I do this in Vim?&lt;/p&gt;&#xA;" OwnerUserId="2" LastEditorUserId="2" LastEditDate="2015-02-03T17:51:07.583" LastActivityDate="2015-02-03T21:05:27.990" Title="How can I add line numbers to Vim?" Tags="&lt;line-numbers&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="3" />
  <row Id="2" PostTypeId="2" ParentId="1" CreationDate="2015-02-03T16:43:11.760" Score="-18" Body="&lt;p&gt;You can use the command:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:set number  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to turn on line numbering.  To turn it off again you can use:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:set nonumber   &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want vim to always default to showing line numbers you can add the command to your &lt;code&gt;vimrc&lt;/code&gt; file.&lt;/p&gt;&#xA;" OwnerUserId="5" LastActivityDate="2015-02-03T16:43:11.760" CommentCount="1" />
  <row Id="3" PostTypeId="1" AcceptedAnswerId="8" CreationDate="2015-02-03T16:54:26.737" Score="19" ViewCount="278" Body="&lt;p&gt;A lot of vim commands can take a number referring to the number of lines that the command will act on. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is it possible to show the line numbers relative to the current line? Something like the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;3: some text here&#xA;2: more text&#xA;1: This is the line above where the cursor is&#xA;0: The cursor is on this line&#xA;1: This is the line after the cursor&#xA;2: More text here&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="11" LastEditorUserId="28" LastEditDate="2015-02-03T16:55:58.233" LastActivityDate="2015-02-03T21:58:31.907" Title="How can I show relative line numbers?" Tags="&lt;line-numbers&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="4" PostTypeId="1" AcceptedAnswerId="43" CreationDate="2015-02-03T16:54:37.670" Score="16" ViewCount="192" Body="&lt;p&gt;I'd like to have different indentations based on the type of file I am working on. For example, working on a &lt;code&gt;.c&lt;/code&gt; file I'd like my indentation be 4 spaces. In &lt;code&gt;.html&lt;/code&gt; files I'd like to (have to) work with tabs. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;How do I achieve that?&lt;/p&gt;&#xA;" OwnerUserId="12" LastEditorUserId="51" LastEditDate="2015-02-04T15:55:57.340" LastActivityDate="2015-02-04T15:55:57.340" Title="How can I change the default indentation based on filetype?" Tags="&lt;indentation&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="2" />
  <row Id="5" PostTypeId="2" ParentId="1" CreationDate="2015-02-03T16:54:58.480" Score="32" Body="&lt;p&gt;You have two options:&#xA;&lt;code&gt;set number&lt;/code&gt; for regular line numbers&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And also&#xA;&lt;code&gt;set relativenumber&lt;/code&gt; which will show relative line numbers. i.e. current line is always 0. This is useful for moving up/down N number of lines using &lt;code&gt;5j&lt;/code&gt; for example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What is cool is that you can combine them. I have the following in my &lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set number                     &quot; Show current line number&#xA;set relativenumber             &quot; Show relative line numbers&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will make it use relative numbers for all lines except the current line, which will show you the actual number.&lt;/p&gt;&#xA;" OwnerUserId="19" LastEditorUserId="135" LastEditDate="2015-02-03T21:05:27.990" LastActivityDate="2015-02-03T21:05:27.990" CommentCount="2" />
  <row Id="6" PostTypeId="1" CreationDate="2015-02-03T16:55:25.927" Score="16" ViewCount="153" Body="&lt;p&gt;The last news item on &lt;a href=&quot;http://www.vim.org/&quot;&gt;vim.org&lt;/a&gt; talks about using the 'undofile' to save your history and undo changes even after a reboot:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A feature I enjoy using myself is not known to many users, as I found out last weekend. Besides undo with as many levels as you like, Vim also offers storing the undo information in a file. So you can exit Vim, reboot your computer and still undo changes you made. See the help for 'undofile'. &lt;em&gt;(Bram Moolenaar)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;How can I enable and use this feature?&lt;/p&gt;&#xA;" OwnerUserId="2" LastEditorUserId="24" LastEditDate="2015-02-05T08:44:10.167" LastActivityDate="2015-02-05T08:44:10.167" Title="How can I use the undofile?" Tags="&lt;persistent-state&gt;&lt;undo-redo&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="4" />
  <row Id="7" PostTypeId="2" ParentId="3" CreationDate="2015-02-03T16:56:53.240" Score="4" Body="&lt;pre&gt;&lt;code&gt;function! NumberToggle()&#xA;  if(&amp;amp;relativenumber == 1)&#xA;    set norelativenumber&#xA;  else&#xA;    set relativenumber&#xA;  endif&#xA;endfunc&#xA;&#xA;nnoremap &amp;lt;leader&amp;gt;nt :call NumberToggle()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="27" LastActivityDate="2015-02-03T16:56:53.240" CommentCount="5" />
  <row Id="8" PostTypeId="2" ParentId="3" CreationDate="2015-02-03T16:58:00.347" Score="22" Body="&lt;p&gt;I just replied to a similar question here: &lt;a href=&quot;http://vi.stackexchange.com/questions/1/how-can-i-add-line-numbers-to-vim&quot;&gt;How can I add line numbers to Vim?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Beginning with version 7.3, you can use the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set relativenumber&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I actually use both &lt;code&gt;relativenumber&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; in my vimrc which will use relative numbers for all lines except the current line.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set number                     &quot; Show current line number&#xA;set relativenumber             &quot; Show relative line numbers&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="19" LastEditorUserId="134" LastEditDate="2015-02-03T21:58:31.907" LastActivityDate="2015-02-03T21:58:31.907" CommentCount="1" />
  <row Id="9" PostTypeId="1" AcceptedAnswerId="23" CreationDate="2015-02-03T16:58:07.553" Score="12" ViewCount="138" Body="&lt;p&gt;I've seen everywhere vim macros, they were somehow similar to a python code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can vim be integrated with such high-level language interpreters?&lt;/p&gt;&#xA;" OwnerUserId="28" LastActivityDate="2015-08-08T18:56:44.530" Title="Can I implement vim macros using python?" Tags="&lt;macro&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="10" PostTypeId="2" ParentId="4" CreationDate="2015-02-03T16:59:52.260" Score="8" Body="&lt;p&gt;&lt;code&gt;augroup&lt;/code&gt; allows you to group related autocommands into named groups. (See &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/14.html&quot;&gt;here&lt;/a&gt; to learn about Autocommand Groups.) We use &lt;code&gt;augroup&lt;/code&gt;s to add autocommands to &lt;code&gt;~/.vimrc&lt;/code&gt; in a way that won't add a duplicate every time we source it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;augroup vimrc&#xA;  autocmd!&#xA;augroup END&#xA;&#xA;autocmd vimrc FileType html setlocal shiftwidth=4 tabstop=4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="27" LastEditorUserId="27" LastEditDate="2015-02-03T17:06:20.293" LastActivityDate="2015-02-03T17:06:20.293" CommentCount="1" />
  <row Id="11" PostTypeId="2" ParentId="4" CreationDate="2015-02-03T17:00:05.557" Score="9" Body="&lt;p&gt;You can do this with autocommands in your &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, I have a function &lt;code&gt;html_like_mode&lt;/code&gt; that sets up various things for editing HTML files. In my &lt;code&gt;.vimrc&lt;/code&gt;, I have:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;au BufNewFile,BufRead *.html call s:html_like_mode()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That keys off of the file extension. You can also key off of the filetype, if you have that enabled:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;au FileType perl setlocal equalprg=perltidy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see, you can have it do any command there. So you could easily do a &lt;code&gt;setlocal shiftwidth 4&lt;/code&gt; for your *.c files. &lt;/p&gt;&#xA;" OwnerUserId="31" LastActivityDate="2015-02-03T17:00:05.557" CommentCount="0" />
  <row Id="12" PostTypeId="1" AcceptedAnswerId="14" CreationDate="2015-02-03T17:00:19.820" Score="21" ViewCount="215" Body="&lt;p&gt;Starting from a blank slate, how can I obtain a document that contains&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;6&#xA;7&#xA;8&#xA;9&#xA;10&#xA;…&#xA;100&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To be clear, I don't want these numbers displayed in the margin; I want them inserted into the document itself.&lt;/p&gt;&#xA;" OwnerUserId="24" LastActivityDate="2015-07-30T19:20:02.640" Title="How can I generate a list of sequential numbers, one per line?" Tags="&lt;line-numbers&gt;&lt;text-generation&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="2" />
  <row Id="13" PostTypeId="1" AcceptedAnswerId="2561" CreationDate="2015-02-03T17:01:08.817" Score="9" ViewCount="203" Body="&lt;p&gt;Actually, I hit this problem when I used ssh from my android phone to log in into a linux server, and I tried to use vim to edit some files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It was a little bit... displeasing, although I could do everything which I could do from a normal desktop/keyboard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Extension:&lt;/em&gt; There was a question, why it was displeasing if I could do anything I wanted. For example, typing &lt;code&gt;5j45|&lt;/code&gt; on an emulated keyboard on a touchscreen has a &lt;em&gt;much&lt;/em&gt; lower information rate (between your brain and your device) as touching the intended character position on a touchscreen.&lt;/p&gt;&#xA;" OwnerUserId="28" LastEditorUserId="28" LastEditDate="2015-02-11T09:12:42.553" LastActivityDate="2015-03-15T05:28:35.963" Title="Does any solution exist to use vim from touch screen?" Tags="&lt;android&gt;&lt;input-devices&gt;" AnswerCount="1" CommentCount="8" FavoriteCount="2" />
  <row Id="14" PostTypeId="2" ParentId="12" CreationDate="2015-02-03T17:02:14.507" Score="32" Body="&lt;p&gt;Use &lt;code&gt;:put&lt;/code&gt; and &lt;code&gt;range()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:put =range(1,100)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To avoid the blank line at the top (&lt;a href=&quot;http://vi.stackexchange.com/questions/12/how-can-i-generate-a-list-of-sequential-numbers-one-per-line#comment15_14&quot;&gt;kudos to romainl&lt;/a&gt;), use &lt;code&gt;:0put&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:0put =range(1,100)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2" LastEditorUserId="2" LastEditDate="2015-02-03T17:41:33.180" LastActivityDate="2015-02-03T17:41:33.180" CommentCount="1" />
  <row Id="15" PostTypeId="2" ParentId="4" CreationDate="2015-02-03T17:03:20.783" Score="3" Body="&lt;p&gt;Used &lt;strong&gt;autocmd&lt;/strong&gt; and &lt;strong&gt;FileType&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd FileType html setlocal shiftwidth=4 tabstop=4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="37" LastActivityDate="2015-02-03T17:03:20.783" CommentCount="0" />
  <row Id="16" PostTypeId="1" AcceptedAnswerId="47" CreationDate="2015-02-03T17:03:23.567" Score="7" ViewCount="49" Body="&lt;p&gt;It is normally on the left side, and it enables a fast switching between files in a complex directory hierarchy.&lt;/p&gt;&#xA;" OwnerUserId="28" LastEditorUserId="33" LastEditDate="2015-02-03T17:47:06.440" LastActivityDate="2015-02-03T21:07:24.633" Title="Can I use some file-tree selector which exists on graphical IDEs?" Tags="&lt;filesystem&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="17" PostTypeId="1" AcceptedAnswerId="22" CreationDate="2015-02-03T17:05:28.760" Score="9" ViewCount="74" Body="&lt;p&gt;This is a problem I had recently. I have a file with several hundred lines of text. How can I search for a string between two specific line numbers? For e.g. I want to search between line numbers 100 and 325.&lt;/p&gt;&#xA;" OwnerUserId="5" LastActivityDate="2015-02-03T17:37:25.613" Title="How can I search for a string between certain line numbers?" Tags="&lt;line-numbers&gt;&lt;search&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="18" PostTypeId="2" ParentId="12" CreationDate="2015-02-03T17:05:31.460" Score="13" Body="&lt;p&gt;In addition to Undo's pure-vim &lt;code&gt;:put =range(1,100)&lt;/code&gt; (which actually leaves you with a blank line up top), you can, depending on your OS, use one of its commands. E.g., on a Unix/Linux box:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;%!seq 1 100&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The above works by piping the entire (empty) buffer to &lt;code&gt;seq&lt;/code&gt;, which ignores its input and just outputs the numbers 1 to 100. Vim then replaces the entire buffer with &lt;code&gt;seq&lt;/code&gt;'s output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's useful when you're already familiar with some command-line way to get what you want.&lt;/p&gt;&#xA;" OwnerUserId="31" LastActivityDate="2015-02-03T17:05:31.460" CommentCount="0" />
  <row Id="19" PostTypeId="1" AcceptedAnswerId="33" CreationDate="2015-02-03T17:05:49.273" Score="13" ViewCount="95" Body="&lt;p&gt;When using &lt;kbd&gt;ci&quot;&lt;/kbd&gt; the cursor does not have to reside in the double quoted area. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;|String somestring = &quot;some text&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Assuming the pipe is the cursor position, &lt;kbd&gt;ci&quot;&lt;/kbd&gt; will make it jump to the quoted area.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On the other hand, when using &lt;kbd&gt;ci(&lt;/kbd&gt;, the cursor must be inside the parentheses to work and will not move the cursor inside them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What is the reason for this difference in behavior?&#xA;I assume there is a way to map the keys so that this behavior is present. Are there any drawbacks to doing this?&lt;/p&gt;&#xA;" OwnerUserId="18" LastEditorUserId="24" LastEditDate="2015-02-03T17:15:13.603" LastActivityDate="2015-02-03T17:25:15.577" Title="Why does ci&quot; and ci( behave differently?" Tags="&lt;cursor-motions&gt;&lt;cursor-movement&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="3" />
  <row Id="20" PostTypeId="2" ParentId="16" CreationDate="2015-02-03T17:05:49.540" Score="4" Body="&lt;p&gt;If &lt;strong&gt;nerdtree&lt;/strong&gt; set:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;let g:NERDTreeWinPos = &quot;right&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="37" LastActivityDate="2015-02-03T17:05:49.540" CommentCount="0" />
  <row Id="22" PostTypeId="2" ParentId="17" CreationDate="2015-02-03T17:09:57.443" Score="12" Body="&lt;pre&gt;&lt;code&gt;:firstline,lastline/search/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For example, on the list generated for &lt;a href=&quot;http://vi.stackexchange.com/questions/12/how-can-i-generate-a-list-of-sequential-numbers-one-per-line/14#14&quot;&gt;this question&lt;/a&gt;, this works:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:1,10/8/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2" LastActivityDate="2015-02-03T17:09:57.443" CommentCount="1" />
  <row Id="23" PostTypeId="2" ParentId="9" CreationDate="2015-02-03T17:15:05.140" Score="10" Body="&lt;p&gt;Yes, vim can be built with several different language interpreters available. This is something you (or your distro) picked when compiling vim from source.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Available at least are Python (as you requested), Perl, Ruby, and Tcl. The vim documentation has details for each; the python one is in &lt;a href=&quot;http://vimhelp.appspot.com/if_pyth.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_pyth.txt&lt;/code&gt;&lt;/a&gt;. That document has plenty of examples.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For reference, here are the ones for other languages:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Perl: &lt;a href=&quot;http://vimhelp.appspot.com/if_perl.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_perl.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Ruby: &lt;a href=&quot;http://vimhelp.appspot.com/if_ruby.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_ruby.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Tcl: &lt;a href=&quot;http://vimhelp.appspot.com/if_tcl.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_tcl.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Lua: &lt;a href=&quot;http://vimhelp.appspot.com/if_lua.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_lua.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;MzScheme: &lt;a href=&quot;http://vimhelp.appspot.com/if_mzsch.txt.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;:help if_mzscheme.txt&lt;/code&gt;&lt;/a&gt; (It's called Racket now, but in Vim it's still called MzScheme for historical reasons).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="31" LastEditorUserId="51" LastEditDate="2015-08-08T18:56:44.530" LastActivityDate="2015-08-08T18:56:44.530" CommentCount="0" />
  <row Id="24" PostTypeId="1" AcceptedAnswerId="26" CreationDate="2015-02-03T17:15:37.783" Score="26" ViewCount="528" Body="&lt;p&gt;When I do a change in my &lt;code&gt;.vimrc&lt;/code&gt;, I usually exit Vim and open it again. Is there an easier way to reload the new &lt;code&gt;.vimrc&lt;/code&gt; changes?&lt;/p&gt;&#xA;" OwnerUserId="53" LastActivityDate="2015-02-21T04:34:01.737" Title="How do I reload my vimrc without leaving Vim?" Tags="&lt;vimrc&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="25" PostTypeId="1" CreationDate="2015-02-03T17:17:19.700" Score="8" ViewCount="66" Body="&lt;p&gt;When I write a script in gedit, the commands, comments, variables etc... are given different colors. How do I setup vim to do the same?&lt;/p&gt;&#xA;" OwnerUserId="17" LastEditorUserId="5" LastEditDate="2015-02-03T17:25:31.333" LastActivityDate="2015-02-03T17:25:31.333" Title="How can I add syntax highlighting to vim as I can do in gedit?" Tags="&lt;syntax-highlighting&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="26" PostTypeId="2" ParentId="24" CreationDate="2015-02-03T17:18:16.467" Score="28" Body="&lt;p&gt;Run:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:source $MYVIMRC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;inside Vim to reload the &lt;code&gt;vimrc&lt;/code&gt; file. Or, a shorter version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:so $MYVIMRC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;as mentioned in a comment by &lt;a href=&quot;http://vi.stackexchange.com/users/467/kenorb&quot;&gt;kenorb&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may also find it useful to map either of these forms to a key. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;r :source $MYVIMRC&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="16" LastEditorUserId="16" LastEditDate="2015-02-21T04:34:01.737" LastActivityDate="2015-02-21T04:34:01.737" CommentCount="3" />
  <row Id="27" PostTypeId="2" ParentId="17" CreationDate="2015-02-03T17:19:20.177" Score="5" Body="&lt;pre&gt;&lt;code&gt;:100,235g/foo/#&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then press &lt;code&gt;:147&amp;lt;CR&amp;gt;&lt;/code&gt; to jump to the desired line.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also use &lt;code&gt;:ilist&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:100,235il foo&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;code&gt;:help range&lt;/code&gt;, &lt;code&gt;:help :global&lt;/code&gt; and &lt;code&gt;:help :ilist&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="54" LastEditorUserId="54" LastEditDate="2015-02-03T17:37:25.613" LastActivityDate="2015-02-03T17:37:25.613" CommentCount="0" />
  <row Id="28" PostTypeId="2" ParentId="9" CreationDate="2015-02-03T17:21:22.127" Score="3" Body="&lt;p&gt;Yes, you can create routines with high level languages such as python, ruby, perl, among other.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To see what languages your vim supports:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;vim --version&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="37" LastEditorUserId="67" LastEditDate="2015-02-03T17:47:16.883" LastActivityDate="2015-02-03T17:47:16.883" CommentCount="0" />
  <row Id="29" PostTypeId="2" ParentId="25" CreationDate="2015-02-03T17:22:50.620" Score="8" Body="&lt;p&gt;Try &lt;code&gt;:syntax on&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To have syntax highlighting enabled by default, add the following line to your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;syntax on&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the file doesn't exist, create it.&lt;/p&gt;&#xA;" OwnerUserId="54" LastActivityDate="2015-02-03T17:22:50.620" CommentCount="0" />
  <row Id="30" PostTypeId="2" ParentId="25" CreationDate="2015-02-03T17:23:12.400" Score="10" Body="&lt;p&gt;vim has an extensive support for syntax highlighting and typical distributions contain a number of highlighting rules. For enabling this you have to switch the syntax module on using &lt;code&gt;:syntax on&lt;/code&gt; in your vim session or globally your &lt;code&gt;.vimrc&lt;/code&gt; file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/syntax.html&quot;&gt;vim help on syntax&lt;/a&gt; for details.&lt;/p&gt;&#xA;" OwnerUserId="59" LastActivityDate="2015-02-03T17:23:12.400" CommentCount="0" />
  <row Id="31" PostTypeId="1" AcceptedAnswerId="38" CreationDate="2015-02-03T17:23:17.467" Score="8" ViewCount="146" Body="&lt;p&gt;I usually need to move/copy code snippets between my source files. After I paste a block of text, I usually need to apply some operation to that block such as reindenting them with &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a way to easily visually select the block of text I just pasted without doing it manually?&lt;/p&gt;&#xA;" OwnerUserId="53" LastEditorUserId="24" LastEditDate="2015-02-19T10:09:01.483" LastActivityDate="2015-02-19T10:09:01.483" Title="How do I visually select the block of text I just pasted in Vim?" Tags="&lt;cut-copy-paste&gt;&lt;visual-mode&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="2" />
  <row Id="32" PostTypeId="2" ParentId="19" CreationDate="2015-02-03T17:24:29.370" Score="7" Body="&lt;p&gt;The quote family of text objects (&lt;code&gt;i'&lt;/code&gt;, &lt;code&gt;i&quot;&lt;/code&gt;, &lt;code&gt;a'&lt;/code&gt;, and &lt;code&gt;a&quot;&lt;/code&gt;) are different than the rest of the text objects in that they only look at the current line.  Due to this, the choice was made not to require the cursor to be within the quotes.  Instead, Vim will search forward within the line to find a quoted string when the cursor isn't already inside one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a &lt;a href=&quot;http://article.gmane.org/gmane.editors.vim.devel/43570&quot;&gt;discussion&lt;/a&gt; around some patches which would allow this forward searching behavior to be implemented for block based text objects as well.&lt;/p&gt;&#xA;" OwnerUserId="15" LastActivityDate="2015-02-03T17:24:29.370" CommentCount="0" />
  <row Id="33" PostTypeId="2" ParentId="19" CreationDate="2015-02-03T17:25:15.577" Score="14" Body="&lt;p&gt;The main difference here is that parenthetical statements (targeted by &lt;code&gt;ci(&lt;/code&gt;) can be nested, while quoted strings (targeted by &lt;code&gt;ci&quot;&lt;/code&gt;) cannot.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your cursor is outside of some parenthetical statement, it could still be inside of some other one. For example (&lt;code&gt;*&lt;/code&gt; marks the cursor position):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$foo = array(&#xA;    'x' =&amp;gt; ar*ray(1, 2, 3),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The line the cursor is on contains &lt;code&gt;(1, 2, 3)&lt;/code&gt;, but the cursor is also inside the larger &lt;code&gt;array(...)&lt;/code&gt; block. In this case, the larger one is the appropriate target for &lt;code&gt;ci(&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your cursor is outside of some quoted string, since they can't be nested, there's no perfectly sensible thing to do. So, Vim takes advantage and finds the first quoted string on the line.&lt;/p&gt;&#xA;" OwnerUserId="64" LastActivityDate="2015-02-03T17:25:15.577" CommentCount="0" />
  <row Id="34" PostTypeId="1" AcceptedAnswerId="51" CreationDate="2015-02-03T17:28:04.373" Score="27" ViewCount="1305" Body="&lt;p&gt;I've been hearing about &lt;a href=&quot;http://neovim.org/&quot;&gt;Neovim&lt;/a&gt;; how does it differ from Vim? All the points on the homepage are just architectural changes 'under the hood'. As a user, what's the difference for me?&lt;/p&gt;&#xA;" OwnerUserId="51" LastEditorUserId="300" LastEditDate="2015-02-16T22:16:35.837" LastActivityDate="2015-02-19T15:47:49.397" Title="What is Neovim? How is it different from Vim? And why should I care?" Tags="&lt;neovim&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="4" />
  <row Id="35" PostTypeId="2" ParentId="31" CreationDate="2015-02-03T17:28:42.477" Score="7" Body="&lt;p&gt;This mapping allows you to reselect the text you just pasted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap gV `[v`]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But you should have used &lt;code&gt;[p&lt;/code&gt; and &lt;code&gt;]p&lt;/code&gt; instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;code&gt;:help [p&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="54" LastActivityDate="2015-02-03T17:28:42.477" CommentCount="1" />
  <row Id="36" PostTypeId="1" AcceptedAnswerId="46" CreationDate="2015-02-03T17:28:50.227" Score="7" ViewCount="40" Body="&lt;p&gt;Folding is useful to hide away parts of the document. A visual representation of the folding structure as a tree would be useful for understanding the document structure at a glance.&lt;/p&gt;&#xA;" OwnerUserId="65" LastActivityDate="2015-02-03T17:47:52.287" Title="Is there a way to display folded parts as a tree?" Tags="&lt;folding&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="37" PostTypeId="2" ParentId="31" CreationDate="2015-02-03T17:29:09.693" Score="2" Body="&lt;p&gt;Vim includes the following helpful mappings:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`[&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which select the first and last character of previously changed text, respectively.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following series of keys (in normal mode) will select the last pasted text:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`[v`]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For faster access, you could set up a mapping, &lt;a href=&quot;http://vim.wikia.com/wiki/Selecting_your_pasted_text&quot; rel=&quot;nofollow&quot;&gt;for example&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap gp `[v`]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="58" LastActivityDate="2015-02-03T17:29:09.693" CommentCount="0" />
  <row Id="38" PostTypeId="2" ParentId="31" CreationDate="2015-02-03T17:30:38.580" Score="13" Body="&lt;p&gt;The &lt;code&gt;'[&lt;/code&gt; and &lt;code&gt;']&lt;/code&gt; marks delimit the first and last line of the previously changed or yanked text.  The &lt;code&gt;`[&lt;/code&gt; and &lt;code&gt;`]&lt;/code&gt; counterparts delimit the respective lines &amp;amp; columns.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using that, you could visually select the last changed block of lines with &lt;kbd&gt;'&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt;&lt;kbd&gt;'&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt; and then apply the &lt;code&gt;=&lt;/code&gt; command.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, since a paste leaves your cursor at the first line of the content that was pasted, you could also just specify a motion over which the &lt;code&gt;=&lt;/code&gt; command should be applied, in this case to the &lt;code&gt;']&lt;/code&gt; mark.  This would be &lt;kbd&gt;=&lt;/kbd&gt;&lt;kbd&gt;'&lt;/kbd&gt;&lt;kbd&gt;]&lt;/kbd&gt;.&lt;/p&gt;&#xA;" OwnerUserId="15" LastActivityDate="2015-02-03T17:30:38.580" CommentCount="0" />
  <row Id="39" PostTypeId="1" AcceptedAnswerId="190" CreationDate="2015-02-03T17:30:57.097" Score="19" ViewCount="1212" Body="&lt;p&gt;Many IDEs automatically complete function names, variables, method names, etc. as the user types. The best ones complete the names based both on the language's built-in library as well as what has already been defined in other files of the same program.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, as I'm typing the following Python program:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hungy = True&#xA;&#xA;def eatFood(food):&#xA;    pass&#xA;&#xA;if hungry:&#xA;    eatF&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;the line &lt;code&gt;eatF&lt;/code&gt; would automatically show &lt;code&gt;eatFood()&lt;/code&gt; as an available auto-complete option.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Does Vim have this capability? If so, how can I enable it?&lt;/p&gt;&#xA;" OwnerUserId="69" LastEditorUserId="88" LastEditDate="2015-02-04T01:35:55.463" LastActivityDate="2015-07-30T16:37:51.013" Title="Is it possible to have vim auto-complete function names, variables, etc. when using it to program?" Tags="&lt;autocompletion&gt;&lt;ide&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="4" />
  <row Id="40" PostTypeId="1" AcceptedAnswerId="48" CreationDate="2015-02-03T17:31:50.490" Score="8" ViewCount="67" Body="&lt;p&gt;Is there a way to center the line I'm editing in the screen? This is sometimes needed to see a bit more context above and below the current line.&lt;/p&gt;&#xA;" OwnerUserId="53" LastEditorUserId="24" LastEditDate="2015-02-03T23:55:52.037" LastActivityDate="2015-02-04T01:29:58.057" Title="How do I center the current line in the screen?" Tags="&lt;scrolling&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="41" PostTypeId="2" ParentId="24" CreationDate="2015-02-03T17:32:00.757" Score="13" Body="&lt;p&gt;If you just want to reload the file once in a while&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:source $MYVIMRC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;as Paul wrote is correct. If you end up changing your vimrc often, you could add something like this to your vimrc file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd BufWritePost .vimrc,_vimrc source $MYVIMRC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will reload the file when you write it (from within that vim session)&lt;/p&gt;&#xA;" OwnerUserId="59" LastEditorUserId="51" LastEditDate="2015-02-20T22:35:43.030" LastActivityDate="2015-02-20T22:35:43.030" CommentCount="3" />
  <row Id="42" PostTypeId="1" CreationDate="2015-02-03T17:33:26.077" Score="10" ViewCount="70" Body="&lt;p&gt;I have a number of JavaScript files where the strings are snippets of HTML to be inserted into the webpage. Vim performs syntax highlighting on the JavaScript, and highlights the quoted strings as such. It seems to go beyond highlighting, in fact: within a quote, vim does not match the &lt;code&gt;&amp;lt;&lt;/code&gt; that begins a tag with the &lt;code&gt;&amp;gt;&lt;/code&gt; that ends it when using &lt;kbd&gt;%&lt;/kbd&gt;; it seems to assume things like brackets don't exist in string literals.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a way to indicate to vim that string literals should be treated as code in a separate language?&lt;/p&gt;&#xA;" OwnerUserId="29" LastEditorUserId="29" LastEditDate="2015-02-03T19:54:26.397" LastActivityDate="2015-02-06T14:55:48.593" Title="Treat string literals as a different language" Tags="&lt;syntax-highlighting&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="43" PostTypeId="2" ParentId="4" CreationDate="2015-02-03T17:33:54.150" Score="12" Body="&lt;p&gt;The best method is to put those settings in &lt;code&gt;~/.vim/after/ftplugin/&amp;lt;filetype&amp;gt;.vim&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For HTML (assuming you want 4 characters-wide tabs):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;~/.vim/after/ftplugin/html.vim&#xA;&#xA;setlocal shiftwidth=4&#xA;setlocal softtabstop=4&#xA;setlocal noexpandtab&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using an ftplugin is prefered to using autocommands because Vim already does filetype checks by itself and already tries to source the adequate ftplugin so there's no reason to force even more checks and reimplement the wheel.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;-- edit --&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming you have &lt;code&gt;filetype plugin on&lt;/code&gt; in your &lt;code&gt;vimrc&lt;/code&gt; — which you should — Vim will try to detect the filetype of the files you edit and, once the correct filetype is found and set for the buffer, try to source the corresponding ftplugin in these standard locations:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$VIMRUNTIME/ftplugin/html.vim&#xA;~/.vim/ftplugin/html.vim&#xA;~/.vim/ftplugin/after/html.vim&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;All of that happens &lt;em&gt;automatically&lt;/em&gt; so, if your filetype is recognized by Vim, there is absolutely no reason to add any filetype detection logic: just add your settings to the right ftplugin and you are good.&lt;/p&gt;&#xA;" OwnerUserId="54" LastEditorUserId="54" LastEditDate="2015-02-03T20:47:51.393" LastActivityDate="2015-02-03T20:47:51.393" CommentCount="4" />
  <row Id="44" PostTypeId="2" ParentId="40" CreationDate="2015-02-03T17:35:26.433" Score="4" Body="&lt;p&gt;Type &lt;code&gt;zz&lt;/code&gt; to center the current line in the screen:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/vj73x.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;&#xA;" OwnerUserId="2" LastActivityDate="2015-02-03T17:35:26.433" CommentCount="0" />
  <row Id="46" PostTypeId="2" ParentId="36" CreationDate="2015-02-03T17:35:57.367" Score="8" Body="&lt;p&gt;You can use &lt;code&gt;:set foldcolumn=&amp;lt;number&amp;gt;&lt;/code&gt; to display a &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;-wide column that tries to visualize fold levels. It would look something like this, by default (with a marker fold method, using &lt;code&gt;{{{&lt;/code&gt; and &lt;code&gt;}}}&lt;/code&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;-    {{{ Top Level Fold&#xA;|-   {{{ Nested Fold&#xA;||-  {{{ Deepest Fold&#xA;|||  }}}&#xA;||   }}}&#xA;|-   {{{ Another Nested Fold&#xA;||   }}}&#xA;|    }}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, this consumes quite a lot of horizontal real-estate. Another method would be to write a custom &lt;code&gt;foldtext()&lt;/code&gt; implementation which reads the fold level with &lt;code&gt;foldlevel()&lt;/code&gt; and formats accordingly. This will waste less horizontal space, but won't really be as helpful for visually understanding the tree since you can't see the folds underneath a collapsed fold. For example, your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set foldtext=CustomFoldText()&#xA;function! CustomFoldText()&#xA;  let line = getline(v:foldstart) . &quot;...&quot;&#xA;  return repeat(&quot;--| &quot;, v:foldlevel) . line&#xA;endfunction&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There are plugins that provide on-demand visualizations of the fold hierarchy, such as &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=732&quot;&gt;folddigest.vim&lt;/a&gt;, as well. They work, essentially, by parsing the fold level of every line, building up an appropriate data structure, and dumping a visualization of the data structure to a new buffer. You could probably adapt the technique to your own needs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may also want to look at plugins that provide &quot;indent guides,&quot; such as &lt;a href=&quot;https://github.com/nathanaelkane/vim-indent-guides&quot;&gt;this one&lt;/a&gt;. I've never personally used them, and I hear they cause some people performance issues since they generally involve generating lots of custom match highlights via &lt;code&gt;matchadd()&lt;/code&gt;, but your mileage may vary.&lt;/p&gt;&#xA;" OwnerUserId="72" LastEditorUserId="72" LastEditDate="2015-02-03T17:47:52.287" LastActivityDate="2015-02-03T17:47:52.287" CommentCount="0" />
  <row Id="47" PostTypeId="2" ParentId="16" CreationDate="2015-02-03T17:36:26.180" Score="6" Body="&lt;p&gt;Vim comes with a built-in file explorer called netrw. If you have a reasonaby recent Vim, the following command will give you the kind of feature you are missing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:Lexplore&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;See &lt;code&gt;:help netrw&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="54" LastActivityDate="2015-02-03T17:36:26.180" CommentCount="0" />
  <row Id="48" PostTypeId="2" ParentId="40" CreationDate="2015-02-03T17:36:59.543" Score="12" Body="&lt;p&gt;The &lt;code&gt;z.&lt;/code&gt; and &lt;code&gt;zz&lt;/code&gt; commands will recenter the line the cursor is on.  &lt;code&gt;z.&lt;/code&gt; also moves the cursor to the first non-whitespace character in the line, while &lt;code&gt;zz&lt;/code&gt; keeps the cursor where it is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are similar commands for the top (&lt;code&gt;z&amp;lt;CR&amp;gt;&lt;/code&gt;/&lt;code&gt;zt&lt;/code&gt;) and bottom (&lt;code&gt;z-&lt;/code&gt;/&lt;code&gt;zb&lt;/code&gt;) of the window.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The versions of these commands that end in a letter keep the cursor column, while the ones ending in punctuation move the cursor.&lt;/p&gt;&#xA;" OwnerUserId="15" LastActivityDate="2015-02-03T17:36:59.543" CommentCount="0" />
  <row Id="49" PostTypeId="2" ParentId="40" CreationDate="2015-02-03T17:37:19.330" Score="1" Body="&lt;p&gt;Yes, in normal mode you can use &lt;code&gt;zz&lt;/code&gt; to do so. But as the &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/scroll.html#zz&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt; forewarn, be careful with capslock as &lt;code&gt;ZZ&lt;/code&gt; will write the buffer to file and quit.&lt;/p&gt;&#xA;" OwnerUserId="44" LastActivityDate="2015-02-03T17:37:19.330" CommentCount="0" />
  <row Id="50" PostTypeId="2" ParentId="40" CreationDate="2015-02-03T17:37:38.970" Score="1" Body="&lt;p&gt;In normal mode, &lt;code&gt;zz&lt;/code&gt; will move the line currently under the cursor to the center of the screen.&lt;/p&gt;&#xA;" OwnerUserId="78" LastEditorUserId="88" LastEditDate="2015-02-04T01:29:58.057" LastActivityDate="2015-02-04T01:29:58.057" CommentCount="0" />
  <row Id="51" PostTypeId="2" ParentId="34" CreationDate="2015-02-03T17:37:58.987" Score="25" Body="&lt;p&gt;Just like the neovim homepage describes, neovim's objective is to pave the way for a better &amp;amp; more openly community driven open source project.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The architectural changes not only will bring more stability &amp;amp; improve performance to vim but make the code a lot more maintainable and bring the entry barrier slightly down for anyone who is interested to contribute.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the key changes also includes the core feature of access to executing jobs / tasks asynchronously in vim, which has been one of the most requested feature of vim since a long time. This can help improve performance of vim even further especially because vim will not have to block while a background job is doing something.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a vim user, not much might change besides the fact that neovim should grow as a software much faster (fix issues, add features) as compared to stock vim and that it will have much better performance in the long run.&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T17:37:58.987" CommentCount="7" />
  <row Id="52" PostTypeId="1" AcceptedAnswerId="59" CreationDate="2015-02-03T17:38:13.723" Score="20" ViewCount="156" Body="&lt;p&gt;I work on a range of JavaScript projects. In most of these projects, the indentation of JavaScript files is 2 spaces, so I've set my default indentation width to that. However it becomes 1 or 4 in some other projects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a way to ask Vim to change the indentation style based on the style already used in the current file?&lt;/p&gt;&#xA;" OwnerUserId="53" LastActivityDate="2015-02-03T17:44:17.883" Title="How do I make Vim adapt to the current indenting style of the file I'm editing?" Tags="&lt;indentation&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="4" />
  <row Id="53" PostTypeId="2" ParentId="6" CreationDate="2015-02-03T17:39:54.577" Score="15" Body="&lt;p&gt;The most simple version is: create &lt;code&gt;~/.vim/undo-dir/&lt;/code&gt; directory and add the following to the &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set undodir=~/.vim/undo-dir&#xA;set undofile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, it's not flawless, and it's better to read on. From my own &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot; Let's save undo info!&#xA;if !isdirectory($HOME.&quot;/.vim&quot;)&#xA;    call mkdir($HOME.&quot;/.vim&quot;, &quot;&quot;, 0770)&#xA;endif&#xA;if !isdirectory($HOME.&quot;/.vim/undo-dir&quot;)&#xA;    call mkdir($HOME.&quot;/.vim/undo-dir&quot;, &quot;&quot;, 0700)&#xA;endif&#xA;set undodir=~/.vim/undo-dir&#xA;set undofile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I prefer not to clutter random directories with undo files. So I set the &lt;code&gt;undodir&lt;/code&gt; option, which puts all of them in one undo directory. That leaves one problem—I'm lazy, and don't feel like creating that directory on all my machines (I use a version control system to sync my &lt;code&gt;.vimrc&lt;/code&gt; across a bunch of machines). Thankfully, it's easy enough to have Vim check for and create the directories if they don't exist.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note also the &lt;code&gt;0700&lt;/code&gt; mode on the undo directory (that's full permissions for the owner, no permissions for anyone else). Which files I've edited, when, etc. should stay private. And since this is a directory only I can access, I don't have to worry about someone else putting a symlink in there, or their own undo file, or whatever as you'd have to worry about using a system temporary directory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, not being a system temporary directory, its not subject to the system tempfile cleanup policy. Often, that's fairly short—a week or so. But to keep it from growing forever, I put the following in my &lt;code&gt;crontab&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# m h  dom mon dow   command&#xA; 43 00 *   *   3     find /home/anthony/.vim/undo-dir -type f -mtime +90 -delete&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So after 90 days of not being modified, they're deleted. (Honestly, they're not really that big, you could easily leave them forever with how cheap disk is. But consider also your own privacy if your machine is ever compromised.)&lt;/p&gt;&#xA;" OwnerUserId="31" LastEditorUserId="82" LastEditDate="2015-02-04T13:36:22.407" LastActivityDate="2015-02-04T13:36:22.407" CommentCount="0" />
  <row Id="54" PostTypeId="2" ParentId="39" CreationDate="2015-02-03T17:41:48.150" Score="12" Body="&lt;p&gt;VIM has support for completion natively, you can read about the various different completions that vim supports at &lt;code&gt;:h ins-completion&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In general, for all purposes I have found that ins-completions are enough for my liking, however there are some completion plugins that add more value beyond what ins-completions offers. &lt;a href=&quot;https://github.com/Shougo/neocomplete.vim&quot; rel=&quot;nofollow&quot;&gt;NeoComplete&lt;/a&gt;, &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot; rel=&quot;nofollow&quot;&gt;YCM (YouCompleteMe)&lt;/a&gt; are a few for the same.  They are more advanced in the sense that they try to combine different types of completions more accurately, they also have advanced caching mechanisms so tend to be faster. YCM even goes to the extent to work with external compilers / utilities to provide better IntelliSense.&lt;/p&gt;&#xA;" OwnerUserId="74" LastEditorUserId="24" LastEditDate="2015-07-30T16:37:51.013" LastActivityDate="2015-07-30T16:37:51.013" CommentCount="0" />
  <row Id="55" PostTypeId="2" ParentId="39" CreationDate="2015-02-03T17:42:01.103" Score="6" Body="&lt;p&gt;Yes, auto completion scripts for vim exist. The &quot;best&quot; choice is depending on your programming language. As your example code is Python I suggest to take a look at &lt;a href=&quot;https://github.com/davidhalter/jedi&quot;&gt;Jedi&lt;/a&gt;. Build on top of that &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;You complete me&lt;/a&gt; exists, which also has support for other languages, but is sometimes seen as too big. For other languages you can browse through the long set on &lt;a href=&quot;http://www.vim.org/scripts/script_search_results.php?keywords=completion&amp;amp;script_type=&amp;amp;order_by=rating&amp;amp;direction=descending&amp;amp;search=search&quot;&gt;vim scripts&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="59" LastActivityDate="2015-02-03T17:42:01.103" CommentCount="0" />
  <row Id="56" PostTypeId="1" AcceptedAnswerId="69" CreationDate="2015-02-03T17:42:18.780" Score="7" ViewCount="162" Body="&lt;p&gt;By default, &lt;code&gt;vim&lt;/code&gt; leaves swap files in my project directory, and on crashes it leaves backup files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can I prevent this? Or do I need to update all my projects' &lt;code&gt;.VCSignore&lt;/code&gt; file?&lt;/p&gt;&#xA;" OwnerUserId="51" LastEditorUserId="51" LastEditDate="2015-02-03T18:08:17.863" LastActivityDate="2015-02-04T03:26:05.757" Title="How can I prevent Vim from leaving too many files (like swap, backup, undo)?" Tags="&lt;crash-recovery&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="57" PostTypeId="2" ParentId="56" CreationDate="2015-02-03T17:42:18.780" Score="1" Body="&lt;p&gt;This is what I do in my vimrc:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fun! MkdirIfNeeded(dir, flags, permissions)&#xA;    if !isdirectory(a:dir)&#xA;        call mkdir(a:dir, a:flags, a:permissions)&#xA;    endif&#xA;endfun&#xA;&#xA;&quot; Set (&amp;amp; create if needed) a temp directory to keep backup &amp;amp; swap files&#xA;if has('win32')&#xA;    let whoami = substitute(system(&quot;whoami /LOGONID&quot;), '\n', '', '')&#xA;    let tmpdir = 'C:/tmp/vim_' . whoami&#xA;else&#xA;    let whoami = substitute(system(&quot;whoami&quot;), '\n', '', '')&#xA;    let tmpdir = '/var/tmp/vim_' . whoami&#xA;endif&#xA;call MkdirIfNeeded(tmpdir, 'p', 0700)&#xA;&#xA;let &amp;amp;backupdir = tmpdir&#xA;let &amp;amp;dir = tmpdir&#xA;let &amp;amp;undodir = tmpdir&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It will create &lt;code&gt;/var/tmp/vim_&amp;lt;username&amp;gt;&lt;/code&gt;, and use this to store all vim-related files. Keeping your project directory clean.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;whoami&lt;/code&gt; makes sure you can use the vimrc globally (ie. for the user &amp;amp; root) while still using separate directories; if you don't need this, you could replace it with a hard coded directory for faster startup. You could also use &lt;code&gt;~/.vim/&lt;/code&gt; directory, but I like using &lt;code&gt;/var/tmp&lt;/code&gt; because it's usually a seperate filesystem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I use &lt;code&gt;/var/tmp&lt;/code&gt; because &lt;code&gt;/tmp&lt;/code&gt; is often cleared on reboot. You probably don't want this directory world-writable, since people could then place files there to do potentially harmful things when you open a file.&lt;/p&gt;&#xA;" OwnerUserId="51" LastEditorUserId="51" LastEditDate="2015-02-03T17:48:12.193" LastActivityDate="2015-02-03T17:48:12.193" CommentCount="4" />
  <row Id="58" PostTypeId="2" ParentId="52" CreationDate="2015-02-03T17:42:52.410" Score="11" Body="&lt;p&gt;I haven't used it, but &lt;a href=&quot;https://github.com/ciaranm/detectindent&quot;&gt;ciaranm/detectindent&lt;/a&gt; might be what you're looking for. It seems to be active (last updated 25 days ago), and looks like it does what you want:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A Vim plugin, for automatically detecting indent settings. This plugin adds a :DetectIndent command, which tries to intelligently set the 'shiftwidth', 'expandtab' and 'tabstop' options based upon the existing settings in use in the active file.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="2" LastActivityDate="2015-02-03T17:42:52.410" CommentCount="0" />
  <row Id="59" PostTypeId="2" ParentId="52" CreationDate="2015-02-03T17:44:17.883" Score="17" Body="&lt;p&gt;To add to @Undo 's answer above. Tim Pope too has a plugin that tries to do the same at &lt;a href=&quot;https://github.com/tpope/vim-sleuth&quot;&gt;tpope/vim-sleuth&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T17:44:17.883" CommentCount="3" />
  <row Id="60" PostTypeId="2" ParentId="39" CreationDate="2015-02-03T17:46:19.047" Score="8" Body="&lt;p&gt;Such functionality - i.e., searching the current file (and all open files) for auto-completion, should be enabled by default with &lt;code&gt;Ctrl+P&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/5040g.png&quot; alt=&quot;screenshot of autocompletion in use&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can go to the &lt;strong&gt;n&lt;/strong&gt;ext suggestion with &lt;code&gt;Ctrl+N&lt;/code&gt;, the &lt;strong&gt;p&lt;/strong&gt;revious suggestion with &lt;code&gt;Ctrl+P&lt;/code&gt; and select it by typing any letter (which will be appended right after the suggestion).&lt;/p&gt;&#xA;" OwnerUserId="82" LastEditorUserId="82" LastEditDate="2015-02-03T18:47:14.643" LastActivityDate="2015-02-03T18:47:14.643" CommentCount="4" />
  <row Id="61" PostTypeId="1" AcceptedAnswerId="66" CreationDate="2015-02-03T17:48:40.290" Score="3" ViewCount="31" Body="&lt;p&gt;I have a lot of &lt;code&gt;*.sage&lt;/code&gt; that follow the Python syntax. However, VIm does not recognize this. Can I make VIm set &lt;code&gt;++filetype&lt;/code&gt; based solely on the file extension?&lt;/p&gt;&#xA;" OwnerUserId="82" LastActivityDate="2015-02-03T17:58:42.593" Title="Setting up ++ft according to the file extension" Tags="&lt;filetype&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="62" PostTypeId="2" ParentId="16" CreationDate="2015-02-03T17:49:53.817" Score="5" Body="&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot;&gt;NerdTree&lt;/a&gt; is commonly used for this, but you may want to take a look at &lt;a href=&quot;http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/&quot;&gt;Oil and vinegar - split windows and the project drawer &lt;/a&gt;, which makes an argument against using it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you choose to go this way, &lt;a href=&quot;https://github.com/tpope/vim-vinegar&quot;&gt;tpope/vim-vinegar&lt;/a&gt; is an extension that enhances the build in directory browser.&lt;/p&gt;&#xA;" OwnerUserId="81" LastEditorUserId="81" LastEditDate="2015-02-03T17:56:15.307" LastActivityDate="2015-02-03T17:56:15.307" CommentCount="1" />
  <row Id="63" PostTypeId="1" CreationDate="2015-02-03T17:50:44.983" Score="5" ViewCount="160" Body="&lt;p&gt;As a complete beginner with no vi experience, how can I learn to use Vim using just Vim itself?  Is there a built-in tutorial, and how can I access it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assume I have a laptop with Linux and Vim installed, and no Internet connection.&lt;/p&gt;&#xA;" OwnerUserId="24" LastEditorUserId="24" LastEditDate="2015-02-03T19:07:41.063" LastActivityDate="2015-02-03T20:05:04.163" Title="How can a complete beginner learn Vim using just Vim itself?" Tags="&lt;help-system&gt;" AnswerCount="4" CommentCount="1" />
  <row Id="64" PostTypeId="1" AcceptedAnswerId="73" CreationDate="2015-02-03T17:51:30.750" Score="6" ViewCount="145" Body="&lt;p&gt;When working with multiple files, it would be very handy if we can see more than one file in the screen at once. Is there any way in Vim to split the window (horizontally or vertically) so each split can show a different file?&lt;/p&gt;&#xA;" OwnerUserId="53" LastActivityDate="2015-02-16T10:52:45.930" Title="Is it possible to split Vim window to view multiple files at once?" Tags="&lt;split&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="65" PostTypeId="2" ParentId="61" CreationDate="2015-02-03T17:51:33.303" Score="3" Body="&lt;p&gt;Yes, you can, using the &lt;code&gt;au(tocmd)&lt;/code&gt; event handler for events &lt;code&gt;BufNewFile&lt;/code&gt; and &lt;code&gt;BufRead&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;au BufNewFile,BufRead *.sage set filetype=python&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="82" LastActivityDate="2015-02-03T17:51:33.303" CommentCount="0" />
  <row Id="66" PostTypeId="2" ParentId="61" CreationDate="2015-02-03T17:54:01.690" Score="3" Body="&lt;p&gt;You can add an &lt;code&gt;ftdetect&lt;/code&gt; plugin for vim. Read &lt;code&gt;:h ftdetect&lt;/code&gt; for detailed information. To quote from the docs for the lazy :&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If a file type that you want to use is not detected yet, there are four ways&#xA;  to add it.  In any way, it's better not to modify the $VIMRUNTIME/filetype.vim&#xA;  file.  It will be overwritten when installing a new version of Vim.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;A. If you want to overrule all default file type checks.&#xA;    This works by writing one file for each filetype.  The disadvantage is that&#xA;    means there can be many files.  The advantage is that you can simply drop&#xA;    this file in the right directory to make it work.&lt;/p&gt;&#xA;  &#xA;  &lt;ol&gt;&#xA;  &lt;li&gt;&lt;p&gt;Create your user runtime directory.  You would normally use the first&#xA;   item of the 'runtimepath' option.  Then create the directory &quot;ftdetect&quot;&#xA;   inside it.  Example for Unix: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:!mkdir ~/.vim&#xA;:!mkdir ~/.vim/ftdetect&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;p&gt;Create a file that contains an autocommand to detect the file type.&#xA;   Example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;au BufRead,BufNewFile *.mine      set filetype=mine&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;Note that there is no &quot;augroup&quot; command, this has already been done&#xA;   when sourcing your file.  You could also use the pattern &quot;*&quot; and then&#xA;   check the contents of the file to recognize it.&#xA;   Write this file as &quot;mine.vim&quot; in the &quot;ftdetect&quot; directory in your user&#xA;   runtime directory.  For example, for Unix:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:w ~/.vim/ftdetect/mine.vim&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;p&gt;To use the new filetype detection you must restart Vim.&#xA;  The files in the &quot;ftdetect&quot; directory are used after all the default&#xA;  checks, thus they can overrule a previously detected file type.  But you&#xA;  can also use &lt;code&gt;:setfiletype&lt;/code&gt; to keep a previously detected filetype.&lt;/p&gt;&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="74" LastEditorUserId="82" LastEditDate="2015-02-03T17:58:42.593" LastActivityDate="2015-02-03T17:58:42.593" CommentCount="0" />
  <row Id="67" PostTypeId="2" ParentId="63" CreationDate="2015-02-03T17:54:29.353" Score="1" Body="&lt;p&gt;You can learn the basics by running &lt;code&gt;vimtutor&lt;/code&gt; at the command line. This ships with vim and provides a basic interactive tutorial on it's use.&lt;/p&gt;&#xA;" OwnerUserId="14" LastActivityDate="2015-02-03T17:54:29.353" CommentCount="0" />
  <row Id="68" PostTypeId="1" CreationDate="2015-02-03T17:55:11.177" Score="12" ViewCount="128" Body="&lt;p&gt;I've turned on spellcheck with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:set spell spelllang=en_us&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I can now correct the spelling of a word by typing &lt;code&gt;1z=&lt;/code&gt; (that is, choose the &lt;code&gt;1&lt;/code&gt;st spelling correction (&lt;code&gt;z=&lt;/code&gt;)).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can I make this automatically run on the previous word whenever I type a space, without any delays? It also tries to &quot;fix&quot; words that are &lt;em&gt;already spelled correctly&lt;/em&gt; (which is why I can't do something like &lt;code&gt;inoremap &amp;lt;space&amp;gt; &amp;lt;esc&amp;gt;mmb1z=`ma&amp;lt;space&amp;gt;&lt;/code&gt;), so I only want to correct every word I type &lt;strong&gt;if it's misspelled&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there any way to autocorrect misspelled words in Vim?&lt;/p&gt;&#xA;" OwnerUserId="88" LastEditorUserId="51" LastEditDate="2015-02-04T15:41:24.330" LastActivityDate="2015-02-04T15:41:24.330" Title="Autocorrect spelling mistakes" Tags="&lt;spell-checking&gt;" AnswerCount="1" CommentCount="3" />
  <row Id="69" PostTypeId="2" ParentId="56" CreationDate="2015-02-03T17:56:02.550" Score="11" Body="&lt;h3&gt;Backup files&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;By default, Vim doesn't leave backup files behind.  They are merely transient files that exist while Vim is saving the buffer to disk.  As described in &lt;code&gt;:help backup-table&lt;/code&gt; this behavior can be controlled by the &lt;code&gt;'backup'&lt;/code&gt; and &lt;code&gt;'writebackup'&lt;/code&gt; options:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'backup' 'writebackup'  action  ~&#xA;   off       off    no backup made&#xA;   off       on     backup current file, deleted afterwards (default)&#xA;   on        off    delete old backup, backup current file&#xA;   on        on     delete old backup, backup current file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Swap files&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;As for swap files, it can be useful to collect them in a dedicated directory.  This can be done with the &lt;code&gt;'directory'&lt;/code&gt; option.  For example&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:set directory^=$HOME/.vim/tmp//&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will add &lt;code&gt;$HOME/.vim/tmp&lt;/code&gt; to the head of the list of directories that Vim will try to use when creating a swap file.  The trailing &lt;code&gt;//&lt;/code&gt; makes Vim encode the entire path name to the file so there aren't collisions with similarly named files from different directories.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;:&#xA;This effectively disables the ability for Vim to notice if multiple users are trying to edit the same file since the swap files are stored in different locations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The snippet below (adapted from &lt;a href=&quot;https://github.com/tpope/tpope/blob/338a4e89494bfe4928d3a0221c3ea1a7f09937cb/.vimrc#L328-L329&quot;&gt;tpope's vimrc&lt;/a&gt;) will also disable the swap file for a buffer when it isn't modified, that way if Vim/your computer crashes when you have a bunch of files open, the swap files left behind will only be for modified files.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *&#xA;  \ if isdirectory(expand(&quot;&amp;lt;amatch&amp;gt;:h&quot;)) | let &amp;amp;swapfile = &amp;amp;modified | endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: Since the swap file only exists when the buffer is modified, this has a similar effect as setting &lt;code&gt;'directory'&lt;/code&gt;.  If the buffer is unmodified, then another Vim can start editing it without notice.  If the second Vim saves before the first one makes more changes, then they won't be noticed until the user tries to save or something triggers Vim to check if the file is modified.&lt;/p&gt;&#xA;" OwnerUserId="15" LastEditorUserId="15" LastEditDate="2015-02-04T03:26:05.757" LastActivityDate="2015-02-04T03:26:05.757" CommentCount="0" />
  <row Id="70" PostTypeId="2" ParentId="64" CreationDate="2015-02-03T17:57:35.373" Score="2" Body="&lt;p&gt;Yes, there are the &lt;code&gt;:split&lt;/code&gt; (split into two windows, top half and bottom half) and &lt;code&gt;:vsplit&lt;/code&gt; (left and right) commands. You can then use &lt;kbd&gt;Ctrl-W &lt;em&gt;direction&lt;/em&gt;&lt;/kbd&gt; to switch windows (where &lt;em&gt;direction&lt;/em&gt; is one of the normal hjkl cursor movement keys, or the arrow keys).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can then &lt;code&gt;:edit&lt;/code&gt; (etc.) a different file in each window.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Full documentation is at &lt;code&gt;:help windows.txt&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="31" LastEditorUserId="31" LastEditDate="2015-02-03T18:03:28.023" LastActivityDate="2015-02-03T18:03:28.023" CommentCount="0" />
  <row Id="71" PostTypeId="2" ParentId="64" CreationDate="2015-02-03T17:57:49.107" Score="1" Body="&lt;p&gt;You can use &lt;code&gt;:split&lt;/code&gt; or &lt;code&gt;:vsplit&lt;/code&gt; for horizontal and vertical splits respectively. Provide the path to the file you want to open to open a specific file. Or just type the command to open a copy if the current file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can then move between splits using &lt;code&gt;C-w + hjkl&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="18" LastEditorUserId="13" LastEditDate="2015-02-15T19:03:47.833" LastActivityDate="2015-02-15T19:03:47.833" CommentCount="1" />
  <row Id="72" PostTypeId="2" ParentId="63" CreationDate="2015-02-03T17:57:59.920" Score="12" Body="&lt;p&gt;&lt;code&gt;vimtutor&lt;/code&gt; is a program that comes with vanilla vim installations. It's a 30-minute-ish tutorial program that explains the basics of vim. On *nix systems, you generally only need to execute &lt;code&gt;vimtutor&lt;/code&gt; on the command-line. Unix also has &lt;code&gt;gvimtutor&lt;/code&gt; available, if you'd prefer a GUI version.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On Windows, &lt;code&gt;vimtutor.bat&lt;/code&gt; is located in &lt;code&gt;$VIMRUNTIME&lt;/code&gt; (generally something like &lt;code&gt;C:\Program Files (x86)\Vim\vim74&lt;/code&gt; or similar). &lt;code&gt;vimtutor.bat&lt;/code&gt; will default to GUI vim on Windows; pass &lt;code&gt;-console&lt;/code&gt; if you want to force it to use console vim.&lt;/p&gt;&#xA;" OwnerUserId="72" LastActivityDate="2015-02-03T17:57:59.920" CommentCount="0" />
  <row Id="73" PostTypeId="2" ParentId="64" CreationDate="2015-02-03T17:58:22.147" Score="7" Body="&lt;p&gt;Yes, vim has the ability to split both horizontally using &lt;code&gt;:split&lt;/code&gt; and vertically using &lt;code&gt;:vsplit&lt;/code&gt; which both work just like &lt;code&gt;:edit&lt;/code&gt; for opening a file, except they open it in a horizontal / vertical split respectively.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, I would recommend to also read &lt;code&gt;:h window-move-cursor&lt;/code&gt; for moving around different splits with ease.&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T17:58:22.147" CommentCount="0" />
  <row Id="74" PostTypeId="1" AcceptedAnswerId="79" CreationDate="2015-02-03T17:59:25.830" Score="6" ViewCount="320" Body="&lt;p&gt;Some word processors and text editors auto-save the files we're editing from time to time, which is very convenient for surviving from nasty crashes, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a way to make Vim auto-save our files after a specific interval? &lt;/p&gt;&#xA;" OwnerUserId="53" LastEditorUserId="24" LastEditDate="2015-02-03T18:03:11.010" LastActivityDate="2015-06-15T02:03:28.917" Title="Is it possible to make Vim auto-save files?" Tags="&lt;save&gt;&lt;crash-recovery&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="75" PostTypeId="2" ParentId="56" CreationDate="2015-02-03T18:00:18.833" Score="4" Body="&lt;p&gt;I use my &lt;code&gt;.vimrc&lt;/code&gt; on multiple machines, including shared servers. I don't necessarily want people being able to see the files that I'm working on and I like keeping my home directory relatively clean. So this is my solution which will work on Linux and Mac OS X just fine.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot; Sets central temp file location, to prevent local default behavior.&#xA;if isdirectory($HOME . '/.vim/.tmp') == 0&#xA;  :silent !mkdir -m 700 -p ~/.vim/.tmp &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&#xA;endif&#xA;&#xA;set backupdir=~/.vim/.tmp &quot;,~/.local/tmp/vim,/var/tmp,/tmp,&#xA;set directory=~/.vim/.tmp &quot;,~/.local/tmp/vim,/var/tmp,/tmp,&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this will create a &lt;code&gt;.tmp&lt;/code&gt; directory under &lt;code&gt;~/.vim&lt;/code&gt; if it doesn't already exist. This would be the new home of your swap files. For undo files, I also have the following in my &lt;code&gt;.vimrc&lt;/code&gt; (which is pretty similar):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if exists(&quot;+undofile&quot;)&#xA;  &quot; undofile -- This allows you to use undos after exiting and &#xA;  &quot;             restarting. NOTE: only present in 7.3+&#xA;  &quot;             :help undo-persistence&#xA;  if isdirectory( $HOME . '/.vim/.undo' ) == 0&#xA;    :silent !mkdir -m 700 -p ~/.vim/.undo &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&#xA;  endif&#xA;  set undodir=~/.vim/.undo&#xA;  set undofile&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="44" LastActivityDate="2015-02-03T18:00:18.833" CommentCount="0" />
  <row Id="76" PostTypeId="1" AcceptedAnswerId="86" CreationDate="2015-02-03T18:02:54.560" Score="2" ViewCount="83" Body="&lt;p&gt;I know it's possible to open a new file in a split, with &lt;code&gt;:split&lt;/code&gt; or &lt;code&gt;:vsplit&lt;/code&gt;, but is it possible to open a new split with an existing buffer, potentially leveraging autocomplete?&lt;/p&gt;&#xA;" OwnerUserId="14" LastActivityDate="2015-02-03T18:59:22.987" Title="Can I open a new vim split from an existing buffer?" Tags="&lt;split&gt;&lt;buffers&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="77" PostTypeId="1" AcceptedAnswerId="288" CreationDate="2015-02-03T18:03:24.890" Score="16" ViewCount="169" Body="&lt;p&gt;At my work we use a standard &lt;code&gt;ts&lt;/code&gt; of 2; my personal preference is 4, which is what I use for my hobby projects, and this other project we inherited has the convention of &lt;code&gt;ts=8&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are also some other settings I want to set on a project basis (for example folding). Basing these settings on the filetype or auto-detecting them based on what the file uses are &lt;em&gt;not&lt;/em&gt; good options, since I want to respect each project's conventions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can I make Vim use a settings file that applies to a project (everything in a directory tree) without adding a modeline to all the files?&lt;/p&gt;&#xA;" OwnerUserId="51" LastEditorUserId="51" LastEditDate="2015-02-23T17:04:00.103" LastActivityDate="2015-05-02T22:33:40.003" Title="Applying settings to a directory tree only" Tags="&lt;vimrc&gt;&lt;filesystem&gt;" AnswerCount="5" CommentCount="1" FavoriteCount="0" />
  <row Id="79" PostTypeId="2" ParentId="74" CreationDate="2015-02-03T18:07:43.503" Score="9" Body="&lt;p&gt;There isn't a builtin option, although &lt;code&gt;:help 'autosave'&lt;/code&gt; (in todo.txt) refers to a description of what such an option could do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One possible way to implement this is to use the &lt;code&gt;CursorHold&lt;/code&gt; autocommand event.  This event is triggered when the user hasn't pressed a key for &lt;code&gt;'updatetime'&lt;/code&gt; seconds.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd CursorHold * update&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;:update&lt;/code&gt; command only saves the buffer if it is modified.  If you also wanted this to happen while insert mode is active, &lt;code&gt;CursorHoldI&lt;/code&gt; could be added to the event list.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd CursorHold,CursorHoldI * update&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Another alternative is the &lt;code&gt;'autowrite'&lt;/code&gt; option, which will save the buffer before executing an external command (useful for saving before running &lt;code&gt;:make&lt;/code&gt;) or switching to a different buffer.&lt;/p&gt;&#xA;" OwnerUserId="15" LastActivityDate="2015-02-03T18:07:43.503" CommentCount="0" />
  <row Id="80" PostTypeId="1" AcceptedAnswerId="81" CreationDate="2015-02-03T18:08:06.667" Score="8" ViewCount="92" Body="&lt;p&gt;I know that &lt;code&gt;gg&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; can move the cursor to the top and bottom of the file. But is there a way to jump to the top or bottom of the visible window?&lt;/p&gt;&#xA;" OwnerUserId="53" LastActivityDate="2015-02-03T18:09:58.903" Title="How can I move the cursor to the top or bottom of the screen?" Tags="&lt;cursor-movement&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="81" PostTypeId="2" ParentId="80" CreationDate="2015-02-03T18:09:58.903" Score="12" Body="&lt;p&gt;Type &lt;kbd&gt;H&lt;/kbd&gt; (capital H) to move to the top of the screen.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Type &lt;kbd&gt;L&lt;/kbd&gt; (capital L) to move to the bottom of the screen.&lt;/p&gt;&#xA;" OwnerUserId="24" LastActivityDate="2015-02-03T18:09:58.903" CommentCount="1" />
  <row Id="82" PostTypeId="1" AcceptedAnswerId="389" CreationDate="2015-02-03T18:10:07.387" Score="11" ViewCount="606" Body="&lt;p&gt;Some editors (such as visual studio on windows) do C++ autocompletion which understand C++. For example, given:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&#xA;&#xA;int main(void) {&#xA;  std::vector&amp;lt;int&amp;gt; v;&#xA;  v.i&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In visual studio the auto-completion knows the only method on &lt;code&gt;std::vector&amp;lt;int&amp;gt;&lt;/code&gt; that starts with an i is &lt;code&gt;insert&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is it possible to get this kind of autocompletion in vim?&lt;/p&gt;&#xA;" OwnerUserId="92" LastEditorUserId="24" LastEditDate="2015-02-06T22:26:21.030" LastActivityDate="2015-02-19T14:32:00.700" Title="How to get intelligent C++ auto-completion" Tags="&lt;ide&gt;&lt;autocompletion&gt;&lt;filetype-c++&gt;" AnswerCount="2" CommentCount="6" FavoriteCount="3" />
  <row Id="83" PostTypeId="2" ParentId="63" CreationDate="2015-02-03T18:15:56.973" Score="1" Body="&lt;p&gt;Like others have mentioned &lt;code&gt;vimtutor&lt;/code&gt; is a good place to start, there are several other resources available to you for improving on your knowledge &amp;amp; understanding of the vim philosophy, which needless to say is not only brilliant but surprisingly &amp;amp; pleasantly intuitive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However I would still like to use an example to draw a parallel to how one should approach learning vim.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;As we are born, we are pretty much immobile, we need to be carried to wherever we need to go, slowly our legs &amp;amp; arms develop muscles and gradually with practice we learn both how to use them &amp;amp; control them precisely to make use of them to start crawling so we can explore our surrounds ourselves. As we grow further and develop more muscles, strength &amp;amp; coordination we start to walk and with some more of the same we eventually are able to run. Now you might think this would be the end of it but it isn't, after we're fairly comfortable walking / running to wherever we desire, we feel the need to go farther and farther and realise the need for more tools (different vehicles) to go farther and faster.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Learning vim IMO should be similar to that, in that you should learn enough that you can allow for your mind to grasp quickly and with practice it would seep into your muscle memory and become second nature, that would the time for you to learn further  more tricks and repeat the cycle.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;After spending enough time &amp;amp; effort in understanding &amp;amp; making vim philosophy so that it's in your muscle memory you will left frustrated at how painfully slow &amp;amp; awful it is to use other applications &amp;amp; editors that don't have some support for mimicking vim.&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T18:15:56.973" CommentCount="0" />
  <row Id="84" PostTypeId="1" AcceptedAnswerId="96" CreationDate="2015-02-03T18:16:03.930" Score="62" ViewCount="1969" Body="&lt;p&gt;Is there a way to copy a block of text to the system clipboard, so I can paste it in another program?&lt;/p&gt;&#xA;" OwnerUserId="53" LastEditorUserId="24" LastEditDate="2015-02-03T23:55:49.503" LastActivityDate="2015-05-26T09:47:48.570" Title="How can I copy text to the system clipboard from Vim?" Tags="&lt;cut-copy-paste&gt;&lt;os-clipboard&gt;" AnswerCount="4" CommentCount="1" FavoriteCount="21" />
  <row Id="85" PostTypeId="1" CreationDate="2015-02-03T18:16:27.527" Score="4" ViewCount="78" Body="&lt;p&gt;Let's say I've been working with vim for some time; I've dabbled with my &lt;code&gt;~/.vimrc&lt;/code&gt; and copied-and-pasted some snippets in I find on the way, with minimal changes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm beginning to get a hazy understanding of this weird language called vimscript. What is an effective way for me to develop a greater understanding of it?&lt;/p&gt;&#xA;" OwnerUserId="91" LastEditorUserId="24" LastEditDate="2015-02-04T10:12:52.917" LastActivityDate="2015-02-04T10:12:52.917" Title="What is an effective way to learn vimscript?" Tags="&lt;vimscript&gt;" AnswerCount="1" CommentCount="3" FavoriteCount="1" ClosedDate="2015-02-03T19:01:25.343" />
  <row Id="86" PostTypeId="2" ParentId="76" CreationDate="2015-02-03T18:17:37.503" Score="5" Body="&lt;p&gt;The &lt;code&gt;sbuffer&lt;/code&gt; command will let you create a split with an existing buffer name or number. &lt;code&gt;:sb#&lt;/code&gt; will open a split with buffer number &lt;code&gt;#&lt;/code&gt; (as displayed in the &lt;code&gt;:buffers&lt;/code&gt; list). &lt;code&gt;:sb foo&lt;/code&gt; will open a split with the buffer named &lt;code&gt;foo&lt;/code&gt;. Tab-complete will cycle the available buffer names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can use &lt;code&gt;:vertical sb...&lt;/code&gt; if you want a vertical split instead of the default, horizontal, one. &lt;/p&gt;&#xA;" OwnerUserId="72" LastActivityDate="2015-02-03T18:17:37.503" CommentCount="0" />
  <row Id="87" PostTypeId="2" ParentId="85" CreationDate="2015-02-03T18:17:40.363" Score="4" Body="&lt;p&gt;I have found &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/&quot; rel=&quot;nofollow&quot;&gt;Learn Vimscript the Hard Way&lt;/a&gt; to be invaluable in improving my understanding of vimscript. It covers both the theory (as a programming language) as well as improving my understanding of vim as an editor. Recommended.&lt;/p&gt;&#xA;" OwnerUserId="91" LastActivityDate="2015-02-03T18:17:40.363" CommentCount="0" />
  <row Id="88" PostTypeId="1" AcceptedAnswerId="90" CreationDate="2015-02-03T18:18:01.323" Score="13" ViewCount="302" Body="&lt;p&gt;For some text formats line breaks matter. For example, I ofen use Vim to write MediaWiki documents, where you can't just put a linebreak anywhere (unlike Markdown). So I'm forced to write lines with a lot of characters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This can lead to long (200+ chars) to very long (1000+ chars) lines. I find this very awkward to use Vim; for example, if I want to edit something in the middle of the 1000 character-line, I need to move my cursor 500 times. This can be made a bit faster with &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt;, but it's still awkward.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Are there better ways to deal with this? Better movement keys? Some sort of &quot;fake wrapping&quot; (text behaves as if &lt;code&gt;tw=80&lt;/code&gt;, but no &lt;code&gt;\n&lt;/code&gt; in the file), or something else?&lt;/p&gt;&#xA;" OwnerUserId="51" LastEditorUserId="51" LastEditDate="2015-02-03T18:39:18.837" LastActivityDate="2015-05-22T14:29:17.027" Title="How do I deal with very long lines in text (500+ characters)" Tags="&lt;cursor-movement&gt;&lt;large-documents&gt;" AnswerCount="5" CommentCount="1" FavoriteCount="1" />
  <row Id="89" PostTypeId="2" ParentId="84" CreationDate="2015-02-03T18:22:33.733" Score="5" Body="&lt;p&gt;From &lt;a href=&quot;http://vim.wikia.com/wiki/Accessing_the_system_clipboard&quot; rel=&quot;nofollow&quot;&gt;http://vim.wikia.com/wiki/Accessing_the_system_clipboard&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set clipboard=unnamedplus&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then use &lt;code&gt;&quot;+y&lt;/code&gt; for copying and &lt;code&gt;&quot;+p&lt;/code&gt; for pasting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This ties the system clipboard to the &lt;code&gt;+&lt;/code&gt; register.  You access the &lt;code&gt;+&lt;/code&gt; register by prefixing your copy and paste commands with &lt;code&gt;&quot;+&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="93" LastEditorUserId="205" LastEditDate="2015-02-07T17:08:24.820" LastActivityDate="2015-02-07T17:08:24.820" CommentCount="0" />
  <row Id="90" PostTypeId="2" ParentId="88" CreationDate="2015-02-03T18:22:33.990" Score="17" Body="&lt;p&gt;You can use &lt;code&gt;g&lt;/code&gt; series of commands to move to the boundaries of the visible screen area.  For example, &lt;kbd&gt;g&lt;/kbd&gt;&lt;kbd&gt;$&lt;/kbd&gt; moves to the right edge of the screen (which is not necessarily the end of the line).  &lt;kbd&gt;g&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt; moves the cursor down one line &lt;em&gt;as it appears on your screen&lt;/em&gt; (which is not necessarily one logical line down).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps you could rebind the arrow keys:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;Up&amp;gt; gk&#xA;nnoremap &amp;lt;Down&amp;gt; gj&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or some people also directly rebind &lt;kbd&gt;k&lt;/kbd&gt; and &lt;kbd&gt;j&lt;/kbd&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap k gk&#xA;nnoremap j gj&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For insert mode, you could use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;inoremap &amp;lt;C-k&amp;gt; &amp;lt;C-o&amp;gt;gk&#xA;inoremap &amp;lt;C-j&amp;gt; &amp;lt;C-o&amp;gt;gj&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;inoremap &amp;lt;Up&amp;gt; &amp;lt;C-o&amp;gt;gk&#xA;inoremap &amp;lt;Down&amp;gt; &amp;lt;C-o&amp;gt;gj&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In addition, if you use &lt;code&gt;:set wrap&lt;/code&gt;, Vim will wrap the lines, so you can see all of the line. You can also use &lt;code&gt;set showsbreak=+&lt;/code&gt; to show a &lt;code&gt;+&lt;/code&gt; to indicate that Vim is doing wrapping.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;To jump to specific column positions, you can use the &lt;kbd&gt;|&lt;/kbd&gt; command. For example, &lt;kbd&gt;200|&lt;/kbd&gt; will go to column position 200.&lt;/p&gt;&#xA;" OwnerUserId="24" LastEditorUserId="51" LastEditDate="2015-05-22T14:29:17.027" LastActivityDate="2015-05-22T14:29:17.027" CommentCount="4" />
  <row Id="91" PostTypeId="2" ParentId="88" CreationDate="2015-02-03T18:23:53.163" Score="3" Body="&lt;p&gt;Vim has support for soft wrapping, just &lt;code&gt;set wrap&lt;/code&gt; to enable it and it will wrap long lines going beyond the visible screen. You can use &lt;code&gt;gj&lt;/code&gt; &amp;amp; &lt;code&gt;gk&lt;/code&gt; to move up/down respectively over such wrapped lines.&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T18:23:53.163" CommentCount="0" />
  <row Id="92" PostTypeId="2" ParentId="84" CreationDate="2015-02-03T18:26:42.867" Score="0" Body="&lt;p&gt;On builds that support it, the register named &lt;code&gt;*&lt;/code&gt; is the system clipboard.  To copy text from Vim to the system clipboard, you can select the text using visual mode, then press &lt;kbd&gt;&quot;&lt;/kbd&gt;&lt;kbd&gt;*&lt;/kbd&gt;&lt;kbd&gt;y&lt;/kbd&gt; to copy it to the system clipboard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Conversely, use &lt;kbd&gt;&quot;&lt;/kbd&gt;&lt;kbd&gt;*&lt;/kbd&gt;&lt;kbd&gt;p&lt;/kbd&gt; to paste text from the system clipboard into Vim.&lt;/p&gt;&#xA;" OwnerUserId="24" LastEditorUserId="64" LastEditDate="2015-05-26T09:47:48.570" LastActivityDate="2015-05-26T09:47:48.570" CommentCount="0" />
  <row Id="93" PostTypeId="1" AcceptedAnswerId="100" CreationDate="2015-02-03T18:31:11.553" Score="8" ViewCount="150" Body="&lt;p&gt;Is it possible to count how many times a word or a pattern appears in a file? This is sometimes useful to find out how many times a function has been called, etc.&lt;/p&gt;&#xA;" OwnerUserId="53" LastActivityDate="2015-03-12T22:27:44.250" Title="Is there a way to count the number of occurrences of a word in a file?" Tags="&lt;search&gt;&lt;count&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="94" PostTypeId="5" CreationDate="2015-02-03T18:31:31.687" Score="0" Body="&lt;p&gt;This tag is for questions about how to use Vim's built-in help system, accessible using the &lt;code&gt;:help&lt;/code&gt; command.&lt;/p&gt;&#xA;" OwnerUserId="24" LastEditorUserId="24" LastEditDate="2015-02-04T14:05:37.743" LastActivityDate="2015-02-04T14:05:37.743" CommentCount="0" />
  <row Id="95" PostTypeId="4" CreationDate="2015-02-03T18:31:31.687" Score="0" Body="Questions about the built-in help system" OwnerUserId="24" LastEditorUserId="24" LastEditDate="2015-02-03T18:57:45.967" LastActivityDate="2015-02-03T18:57:45.967" CommentCount="0" />
  <row Id="96" PostTypeId="2" ParentId="84" CreationDate="2015-02-03T18:34:03.263" Score="79" Body="&lt;p&gt;For &lt;strong&gt;X11&lt;/strong&gt;-based systems (ie. &lt;strong&gt;Linux&lt;/strong&gt; and most other &lt;strong&gt;UNIX&lt;/strong&gt;-like systems) there are 2 clipboards, which are independent of each&#xA;other:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PRIMARY - This is copy-on-select, and can be pasted with the middle mouse&#xA;button.&lt;/li&gt;&#xA;&lt;li&gt;CLIPBOARD - This is copied with (usually) &lt;code&gt;^C&lt;/code&gt;, and pasted with &lt;code&gt;^V&lt;/code&gt; (It's&#xA;like MS Windows).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;OS X&lt;/strong&gt; and &lt;strong&gt;Windows&lt;/strong&gt; systems only have 1 clipboard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For X11 systems there are also number of tools that synchronize these clipboards&#xA;for you; so if they appear to be the same, you may have one of them running.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Vim has 2 special registers corresponding to these clipboards:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;*&lt;/code&gt; uses PRIMARY; mnemonic: &lt;strong&gt;s&lt;/strong&gt;tar is &lt;strong&gt;s&lt;/strong&gt;elect (for copy-on-&lt;strong&gt;s&lt;/strong&gt;elect)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;+&lt;/code&gt; uses CLIPBOARD; mnemonic: CTRL &lt;strong&gt;+&lt;/strong&gt; C (for the common keybind)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;On Windows &amp;amp; OSX there is no different between &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;, since these systems&#xA;only have a single clipboard, and both registers refer to the same thing (it&#xA;doesn't matter which one you use).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can use these registers as any register. For example, using the PRIMARY&#xA;clipboard &lt;code&gt;*&lt;/code&gt; with the &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; commands:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;&quot;*yy&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&quot;*p&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You could maybe use this as more convenient keybinds:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;y &quot;*y&#xA;nnoremap &amp;lt;Leader&amp;gt;p &quot;*p&#xA;nnoremap &amp;lt;Leader&amp;gt;P &quot;*P&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to &quot;automatically&quot; interface with the system's clipboard instead of&#xA;referring to it manually all the time, you can set the &lt;code&gt;clipboard&lt;/code&gt; variable:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set it to &lt;code&gt;unnamed&lt;/code&gt; to use &lt;code&gt;*&lt;/code&gt; (PRIMARY, on select)&lt;/li&gt;&#xA;&lt;li&gt;Set it to &lt;code&gt;unnamedplus&lt;/code&gt; to use &lt;code&gt;+&lt;/code&gt; (CLIPBOARD, &lt;code&gt;^C&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Now, just using &lt;code&gt;yy&lt;/code&gt; will go to the system's clipboard, instead of Vim's unnamed&#xA;register, and &lt;code&gt;p&lt;/code&gt; will paste the system's clipboard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also assign to these registers just like any register with &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;:let @+=42&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:let @*=42&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;clipboard&lt;/code&gt; setting has some more options (such as exclude filters); but&#xA;these are the basics. See &lt;code&gt;:help 'clipboard'&lt;/code&gt; for the full story ;-)&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;gVim&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;If you use gVim, you can get copy-on-select behaviour when using&#xA;&lt;code&gt;:set guioptions+=a&lt;/code&gt;.&lt;br&gt;&#xA;This is enabled by default on X11 systems (copies to PRIMARY), but &lt;em&gt;not&lt;/em&gt; on MS&#xA;Windows &amp;amp; OSX (as selecting any text would override your clipboard).&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;No &lt;code&gt;+clipboard&lt;/code&gt;?&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Vim requires the &lt;code&gt;+clipboard&lt;/code&gt; feature flag for any of this to work; you can&#xA;check if your Vim has this by using &lt;code&gt;:has('clipboard')&lt;/code&gt; from within Vim (if the&#xA;output is &lt;code&gt;0&lt;/code&gt;, it &lt;em&gt;not&lt;/em&gt; present, if it's &lt;code&gt;1&lt;/code&gt;, it is), or checking the output of&#xA;&lt;code&gt;vim --version&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most Linux distributions ship with a &quot;minimal&quot; Vim build by default, which&#xA;doesn't have &lt;code&gt;+clipboard&lt;/code&gt;, but you can usually install it:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Debian &amp;amp; Ubuntu: Install &lt;code&gt;vim-gtk&lt;/code&gt; or &lt;code&gt;vim-gnome&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Fedora: install &lt;code&gt;vim-x11&lt;/code&gt;, and run &lt;code&gt;vimx&lt;/code&gt; instead of &lt;code&gt;vim&lt;/code&gt; (&lt;a href=&quot;http://vi.stackexchange.com/q/2063/51&quot;&gt;more info&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Arch Linux: install &lt;code&gt;gvim&lt;/code&gt; (this will enable &lt;code&gt;+clipboard&lt;/code&gt; for normal &lt;code&gt;vim&lt;/code&gt; as well).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You could also use &lt;code&gt;xclip&lt;/code&gt;, &lt;code&gt;xcopy&lt;/code&gt;, or &lt;code&gt;xsel&lt;/code&gt; to copy text to the clipboard;&#xA;see&#xA;&lt;a href=&quot;http://vi.stackexchange.com/questions/332/define-custom-commands-for-the-and-registers&quot;&gt;Define custom commands for the * and + registers&lt;/a&gt;&#xA;for more information on that.&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;SSH&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;You can also use a clipboard on remote machines if you enable X11 forwarding&#xA;over SSH. This is especially useful with the above tip, since you can then use&#xA;&lt;code&gt;xclip&lt;/code&gt; to access your desktop's clipboard&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This requires the &lt;code&gt;ForwardX11Trusted&lt;/code&gt; setting, and should &lt;strong&gt;only be&#xA;done with trusted servers&lt;/strong&gt;, as this gives the server almost complete control&#xA;over your X11 session:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ ssh -XY myhost&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To make these settings persistent (so you don't need to add &lt;code&gt;-XY&lt;/code&gt; every time),&#xA;you could  do something like this in your &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Do **NOT** set this globally; it gives the server complete control over&#xA;# your X11 session.&#xA;Host myhost&#xA;    ForwardX11 yes&#xA;    ForwardX11Trusted yes&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="51" LastEditorUserId="51" LastEditDate="2015-05-26T08:49:52.003" LastActivityDate="2015-05-26T08:49:52.003" CommentCount="1" />
  <row Id="97" PostTypeId="2" ParentId="93" CreationDate="2015-02-03T18:34:49.177" Score="1" Body="&lt;p&gt;&lt;code&gt;:s/pattern//g&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You'll see the number of substitutions in the status bar.  That's how many times the &lt;code&gt;pattern&lt;/code&gt; appears.  Then just press &lt;code&gt;u&lt;/code&gt; to undo the substitutions.&lt;/p&gt;&#xA;" OwnerUserId="93" LastActivityDate="2015-02-03T18:34:49.177" CommentCount="0" />
  <row Id="98" PostTypeId="2" ParentId="93" CreationDate="2015-02-03T18:37:59.430" Score="9" Body="&lt;p&gt;&lt;code&gt;:%s/pattern//n&lt;/code&gt; The &lt;code&gt;n&lt;/code&gt; flag in the end tells &lt;code&gt;:s&lt;/code&gt; command to report the number of matches and not actually substitute. Read &lt;code&gt;:h :s_flags&lt;/code&gt; for more details.&lt;/p&gt;&#xA;" OwnerUserId="74" LastActivityDate="2015-02-03T18:37:59.430" CommentCount="2" />
  <row Id="99" PostTypeId="2" ParentId="93" CreationDate="2015-02-03T18:41:16.913" Score="3" Body="&lt;p&gt;First use &lt;code&gt;/&lt;/code&gt; to search for a regex, then&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:%s///gn&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is the same as Dhurva's answer, except that it a.) Is easier to use (since you can preview the results of what your regex matches first) and b.) Matches globally with the &lt;code&gt;g&lt;/code&gt; flag to count &lt;strong&gt;all&lt;/strong&gt; occurrences.&lt;/p&gt;&#xA;" OwnerUserId="88" LastActivityDate="2015-02-03T18:41:16.913" CommentCount="0" />
  <row Id="100" PostTypeId="2" ParentId="93" CreationDate="2015-02-03T18:42:19.227" Score="17" Body="&lt;p&gt;Quincy's answer is fine, but there's an exact way to do this which doesn't require editing the buffer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:%s/pattern//ng&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will print a message like &lt;code&gt;3 matches on 2 lines&lt;/code&gt;, and no changes will be made to your buffer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;n&lt;/code&gt; flag makes the &lt;code&gt;:substitute&lt;/code&gt; command print the number of matches instead of performing an actual substitution; the &lt;code&gt;g&lt;/code&gt; flag enables reporting of multiple matches per line.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Another thing that might be useful to your use case is to print all lines that match a pattern:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:global/pattern/print&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which can be shortened to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:g/pattern/p&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is one of the simplest uses of the &lt;code&gt;:global&lt;/code&gt; command (which is mind-bogglingly powerful). It will simply print out all of the lines that match &lt;code&gt;pattern&lt;/code&gt;, and then you press &lt;code&gt;Enter&lt;/code&gt; or type another command to make it go away.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A bit of trivia: This command is the origin of the name &lt;code&gt;grep&lt;/code&gt;, as it would commonly be described as &lt;code&gt;g/re/p&lt;/code&gt;, where &lt;code&gt;re&lt;/code&gt; stands for &quot;regular expression&quot;.&lt;/p&gt;&#xA;" OwnerUserId="64" LastEditorUserId="64" LastEditDate="2015-03-12T22:27:44.250" LastActivityDate="2015-03-12T22:27:44.250" CommentCount="1" />
  <row Id="101" PostTypeId="1" AcceptedAnswerId="109" CreationDate="2015-02-03T18:45:02.220" Score="4" ViewCount="22" Body="&lt;p&gt;Vim has an &quot;abbreviation&quot; feature built-in that can automatically expand certain abbreviations:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;:iab SE Stack Exchange&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/hhWer.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, sometimes I might want to type &quot;SE&quot; &lt;em&gt;without&lt;/em&gt; it expanding to &quot;Stack Exchange.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there any way to undo a single abbreviation and insert only the original, unabbreviated text? If not, can I add something to my &lt;code&gt;.vimrc&lt;/code&gt; to enable a key shortcut or other method of doing so?&lt;/p&gt;&#xA;" OwnerUserId="88" LastActivityDate="2015-02-03T18:55:35.190" Title="Undo a single iab abbreviation expansion" Tags="&lt;abbreviations&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="2" />
</posts>
